/// @file samplers.hpp Sampling from various useful distributions

#ifndef BIGGLES_SAMPLERS_HPP__
#define BIGGLES_SAMPLERS_HPP__

#include "model.hpp"
#include "partition.hpp"

namespace biggles
{

/// @brief calculate the contribution to Phi from a particular track
Eigen::Matrix2f wishart_phi_parameter_for_track(const boost::shared_ptr<const track>& track_p, model::parameters& params);

/// @brief Sample from the posterior distributions for model parameters.
///
/// This function forms one half of the Gibbs sampler which implements the Biggles tracking algorithm. This function
/// samples a set of model parameters, \f$ \theta \f$, from the posterior distribution \f$ P(\theta | T, D) \f$ where
/// \f$ T \f$ is the set of track associations and \f$ D \f$ is the observed data.
///
/// The model parameters are made up of the tuple \f$ ( \lambda_b, \lambda_f, p_s, p_d, R ) \f$. Individual elements
/// of this tuple are explained in documentation for the biggles::model::parameters tuple. Since each parameter is
///
/// The only parameter which depends directly on the observations is \f$ R \f$, the remainder depend only on the
/// track birth and death times and overall count of clutter observations. We may thus sample them from
/// known conjugate parameter distributions for the distributions outlined in
/// biggles::log_partition_given_parameters_density().
///
/// Specifically:
///
/// - \f$ P(p_s | T) = f_\beta ( p_s ; 1 + N^s, 1 + N^d ); \f$
/// - \f$ P(p_d | T) = f_\beta ( p_d ; 1 + N^o, 1 + N^s + N^b - N^o ); \f$
/// - \f$ P(K\lambda_b | T) = f_\gamma ( K\lambda_b ; 1 + N^b, 1 ); \f$
/// - \f$ P(K\lambda_f | T) = f_\gamma ( K\lambda_f ; 1 + N^f, 1 ), \f$
///
/// where \f$ K \f$ is the total frame count, \f$ f_\beta(\cdot) \f$ is the pdf of the Beta distribution, \f$
/// f_\gamma(\cdot) \f$ is the pdf of the Gamma distribution, \f$ N^s = \sum_{t=1}^K N_t^s \f$ and similarly for \f$ N^d
/// \f$, \f$ N^o \f$, \f$ N^b \f$ and \f$ N^f \f$. Closed form solutions exist to sample from these distributions.
///
/// Sampling \f$ R \f$ is more difficult as it depends on the actual observations. To sample \f$ R \f$, we first
/// sample the underlying states of the dynamic model using the state estimates and covariance matrices generated by
/// biggles::kalman_smoother. This provides us with a state sample, \f$ X \f$, drawn from \f$ P(X | R, T, D) \f$.
/// The usual distribution for sampling a covariance matrix is an inverse Wishart distribution, \f$
/// P(R|X,T,D) = \mathcal{W}^{-1}(R ; \Phi', s') \f$ whose parameters may be calculated as:
///
/// \f[
/// \Phi' = \Phi + \sum_{k=1}^N \sum_{t \in T_k} (d_{k,t} - B x_{k,t}) (d_{k,t} - B x_{k,t})^T, \quad
/// s' = s + \sum_{k=1}^N l_k
/// \f]
///
/// where \f$ N \f$ is the number of tracks in the current partition, \f$ T_k \f$ is the set of time stamps with an
/// associated observation in track \f$ k \f$, \f$ d_{k,t} \f$ is the observation with time stamp \f$ t \f$ in track
/// \f$ k \f$, \f$ x_{k,t} \f$ is the estimate of state with time stamp \f$ t \f$ in track \f$ k \f$, \f$ B \f$ is
/// the state observation matrix from biggles::kalman_smoother and \f$ l_k \f$ are the number of observations in
/// track \f$ k \f$. The parameters of the prior are \f$ s = 5 \f$, \f$ \Phi = 2I \f$.
///
/// @sa biggles::model::parameters
/// @sa biggles::log_partition_given_parameters_density().
///
/// @return A model parameter sample.
///
/// @param partition A partition to condition the sampler on.
/// @param params A reference to a set of model parameters to update with the newly sampled values. The value of \f$ R
/// \f$ is used and must be initialised to a sensible value.
void sample_model_parameters_given_partition(const partition& partition, model::parameters& params);

/// @brief Sample from the posterior birth rate distributions.
/// \sa sample_model_parameters_given_partition
void sample_birth_rate_given_partition(const partition& part_sample, model::parameters& params);

/// @brief Sample from the posterior clutter rate distributions.
/// \sa sample_model_parameters_given_partition
void sample_clutter_rate_given_partition(const partition& part_sample, model::parameters& params);

/// @brief Sample from the posterior observation probability distributions.
/// \sa sample_model_parameters_given_partition
void sample_observation_probability_given_partition(const partition& part_sample, model::parameters& params);

/// @brief Sample from the posterior survival probability distributions.
/// \sa sample_model_parameters_given_partition
void sample_survival_probability_given_partition(const partition& part_sample, model::parameters& params);

/// \brief Sample from the posterior observation error, R, distribution
/// \sa sample_model_parameters_given_partition
void sample_observation_error_given_partition(const partition& part_sample, model::parameters& params);

/// \brief A meta function that samples *b*, *c*, *o* and *s*
/// \sa sample_model_parameters_given_partition
/// \sa sample_birth_rate_given_partition
/// \sa sample_clutter_rate_given_partition
/// \sa sample_observation_probability_given_partition
/// \sa sample_survival_probability_given_partition
void sample_tracking_control_parameters_given_partition(const partition& part_sample, model::parameters& params);

} // namespace biggles

#endif // BIGGLES_SAMPLERS_HPP__
