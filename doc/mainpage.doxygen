/** @mainpage
 *
 * @section biggles_introduction Introduction
 *
 * The Biggles tracking library is an in-house project by the LoLa data analysis team to implement a Bayesian feature
 * tracker for use in single molecule imaging applications.
 *
 * To use the library, one need at a minimum familiarise oneself with the biggles::tracker class. This class implements
 * the core Biggles tracking algorithm.
 *
 * The algorithm itself is outlined at a high level in the documentation for biggles::tracker. Other compounds within
 * the library contain documentation for sub-sections of the Biggles algorithm. These are linked to from the
 * documentation for biggles::tracker.
 *
 * @section biggles_sections In-depth documentation
 *
 * Documentation on subsets of the Biggles algorithm is documented in depth elsewhere:
 *
 * - @ref biggles_data_model &ndash; outline the basic data model used to represent tracks and observations within
 * Biggles.
 * - @ref mh_moves &ndash; document the move types implemented as the proposal distribution for the Metropolis-Hasting
 * sampler used to find optimal track to data associations given a set of model parameters.
 *
 * @section biggles_dynamic_model Dynamic model
 *
 * The dynamic model is the mathematical model reflecting our belief about how tracks are actually generated. Functions
 * and classes to do with this are located in the biggles::model namespace. In addition to the input data observations
 * and track associations, Biggles maintains a set of model <em>parameters</em> which describe the underlying processes
 * assumed to be generating the data. These are represented by the biggles::model::parameters type which, like
 * biggles::observation, is implemented as a typedef for a \c boost::tuple. Again like biggles::observation,
 * convenience functions are provided to access individual elements.
 *
 * The biggles::model namespace also contains functions for evaluating various values related to the statistical model
 * used in Biggles. See the individual functions' documentation for more details.
 *
 * @section biggles_simulate Simulating ground-truth partitions and synthetic input
 *
 * Biggles also contains functions in the biggles::simulate namespace which allow synthetic tracks and full partitions
 * to be generated from known model parameters. The three most useful functions are:
 *
 * - biggles::simulate::generate_partition(): simulate an entire ground-truth partition including tracks and synthetic
 * clutter;
 * - biggles::simulate::crop_partition(): crop partitions generated by the above to a given spatio-temporal bounding
 * box; and
 * - biggles::simulate::demote_all_tracks_from_partition(): take all the tracks in a ground-truth partition and
 * reassign their observations to the clutter.
 *
 * All three functions may be used together to generate synthetic input data for the Biggles tracking algorithm.
 *
 * @section biggles_tbd To be documented...
 *
 * The above sections outline the main interface to the Biggles library but in addition there is a large amount of
 * functionality within the biggles:sampling namespace which you might be interested in. Also biggles::kalman_filter
 * combined with biggles::rts_smooth() allows missing observations from tracks to be interpolated and covariance
 * matrices for the interpolation error be estimated.
 *
 * The Metropolis-Hastings moves within the biggles::mh_moves namespace are, shamefully, almost entirely undocumented.
 */

// vim:filetype=cpp
